{"version":3,"sources":["selectors/index.ts","slices/transaction.ts","types/index.ts","util/category.ts","constants/index.ts","components/TransactionsCollection/TransactionPanel.tsx","containers/TransactionEditModal.tsx","containers/TransactionsCollection.tsx","util/transaction.ts","slices/category.ts","components/ColorTag.tsx","components/ManagerView/CategoryManager/EditableCategoryItem.tsx","containers/CategoryEditModal.tsx","containers/CategoryManager.tsx","containers/ManageView.tsx","components/Dashboard/ExpensePanel.tsx","components/Dashboard/IncomePanel.tsx","containers/Dashboard.tsx","components/Summary/SummaryBoard.tsx","containers/SummaryBanner.tsx","containers/Toolbar.tsx","images/logo.png","containers/Header.tsx","containers/App.tsx","api/index.ts","sagas/index.ts","slices/index.ts","index.tsx"],"names":["getTransactions","state","transactionState","getCategories","categoryState","transactionSlice","createSlice","name","initialState","transactions","loading","editing","editingId","reducers","addTransaction","payload","push","updateTransaction","map","transaction","id","deleteTransaction","filter","loadTransactions","loadTransactionsError","error","loadTransactionsSuccess","setEditing","setEditingId","actions","CategoryType","getCategoryItemById","categories","find","cate","COLORS","dateFormat","TransactionPanel","props","heading","onDelete","onEdit","getDateView","useSelector","orientation","className","transacs","i","categoryItem","category","gutter","justify","align","span","date","style","color","categoryType","EXPENSE","INCOME","amount","fontWeight","memo","size","placement","title","onClick","event","type","icon","EditTwoTone","fontSize","DeleteTwoTone","Option","Select","layout","labelCol","wrapperCol","TransactionEditModal","Form","useForm","form","editingTransactionItem","item","v4","moment","Date","format","useState","getCategoryTypeById","activeCategoryType","setActiveCategoryType","React","useEffect","resetFields","filteredCategories","dispatch","useDispatch","addingNew","handleModalClose","handleTransactionCreate","_addTransaction","handleTransactionUpdate","_updateTransaction","modalTitle","modalOkText","Fragment","visible","okText","cancelText","onOk","validateFields","then","values","dateMoment","transactionToSolve","catch","info","console","log","onCancel","initialValues","remember","preserve","Item","label","rules","required","initialValue","Group","buttonStyle","onChange","target","value","Button","placeholder","message","minWidth","formatter","replace","parser","confirm","Modal","TransactionsCollection","orderedTransactions","slice","sort","t1","t2","isSameOrAfter","_setEditing","_setEditingId","currentPage","setCurrentPage","pageSize","setPageSize","handleEdit","handleDelete","_deleteTransaction","success","start","length","todayTransactions","yesterdayTransactions","monthsTransaction","today","yesterday","months","startDate","startYesterday","setDate","getDate","startYear","getFullYear","startMonth","getMonth","startDay","forEach","created","createdDate","createdYear","createdMonth","createdDay","groupTransactionByDate","_","chunk","showCategoryDeleteConfirm","ExclamationCircleOutlined","content","okType","transactionsByMonth","Map","k","dateString","split","join","getKey","has","get","set","groupTransactionByMonth","PlusOutlined","e","StarFilled","dateStr","keys","key","index","current","defaultCurrent","page","total","defaultPageSize","categorySlice","addCategory","loadCategories","loadCategoriesError","loadCategoriesSuccess","updateCategory","deleteCategory","ColorTag","backgroundColor","width","height","display","marginRight","EditableCategoryItem","categoryItemData","active","others","alignItems","CategoryEditModal","editingCategoryItem","handleModalOnCancel","handleCategoryCreate","_addCategory","handleCategoryUpdate","_updateCategory","newCategoryItem","updatedCategoryItem","CategoryManager","useModal","handleCategoryDelete","_deleteCategory","listStyle","handleCategoryOnSave","ManageView","RangePicker","DatePicker","ExpensePanel","paused","setPaused","puasedTimer","useRef","selectedCate","setSelectedCate","setStart","add","end","setEnd","rangeStartRef","rangeEndRef","window","clearTimeout","filteredTransactions","indexOf","isSameOrBefore","pieDataMap","cateId","categoriesMap","groupedData","groupBy","_data","Object","arr","count","element","data","labels","datasets","n","toFixed","borderWidth","direction","defaultValue","onCalendarChange","dates","dateStrings","s","onOpenChange","open","setTimeout","setPausedWithDelay","picker","marginTop","IncomePanel","TabPane","Tabs","Dashboard","categories1","categories2","defaultActiveKey","activeKey","tab","Text","Typography","SummaryBoard","thisMonthExpense","thisMonthIncome","netRevenue","parseFloat","Title","level","toString","SummaryBanner","thisMonthTransactions","isSame","cateItem","Toolbar","Header","src","logo","alt","App","getLocalStorage","errorMessage","resolve","reject","localStorage","getItem","JSON","parse","fetchTransactions","fetchCategories","rootSaga","Promise","put","all","takeLatest","rootReducer","combineReducers","transactionReducer","categoryReducer","history","createBrowserHistory","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2274ccfe.chunk.js","sourcesContent":["import { RootState } from \"../types\";\n\nexport const getTransactions = (state: RootState) => state.transactionState;\nexport const getCategories = (state: RootState) => state.categoryState;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TransactionState, TransactionItem } from \"../types\";\n\nexport const initialState: TransactionState = {\n  transactions: [],\n  loading: true,\n  editing: false,\n  editingId: \"\",\n};\n\nconst transactionSlice = createSlice({\n  name: \"transaction\",\n  initialState,\n  reducers: {\n    addTransaction: (state, { payload }: PayloadAction<TransactionItem>) => {\n      state.transactions.push(payload);\n    },\n    updateTransaction: (state, { payload }: PayloadAction<TransactionItem>) => {\n      state.transactions = state.transactions.map((transaction) =>\n        transaction.id === payload.id\n          ? { ...transaction, ...payload }\n          : transaction\n      );\n    },\n    deleteTransaction: (state, { payload }: PayloadAction<string>) => {\n      state.transactions = state.transactions.filter(\n        (transaction) => transaction.id !== payload\n      );\n    },\n    loadTransactions: (state) => {\n      state.loading = true;\n    },\n    loadTransactionsError: (state, { payload }: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = payload;\n    },\n    loadTransactionsSuccess: (\n      state,\n      { payload }: PayloadAction<TransactionItem[]>\n    ) => {\n      state.transactions = payload;\n      state.loading = false;\n    },\n    setEditing: (state, { payload }: PayloadAction<boolean>) => {\n      state.editing = payload;\n    },\n    setEditingId: (state, { payload }: PayloadAction<string>) => {\n      state.editingId = payload;\n    },\n  },\n});\n\nexport const {\n  addTransaction,\n  loadTransactions,\n  loadTransactionsError,\n  loadTransactionsSuccess,\n  updateTransaction,\n  deleteTransaction,\n  setEditing,\n  setEditingId,\n} = transactionSlice.actions;\n\nexport default transactionSlice.reducer;\n","import React from \"react\";\n\n//==============================================================================\n// Items\n//==============================================================================\n\nexport enum CategoryType {\n  INCOME = \"INCOME\",\n  EXPENSE = \"EXPENSE\",\n}\n\nexport interface TransactionItem {\n  id: string;\n  memo: string;\n  amount: number;\n  date: string;\n  // category-id\n  category: string;\n}\n\nexport interface CategoryItem {\n  id: string;\n  name: string;\n  categoryType: CategoryType;\n  color: string;\n}\n\nexport interface TransactionState {\n  transactions: TransactionItem[];\n  loading: boolean;\n  error?: string;\n  editing: boolean;\n  editingId: string;\n}\nexport interface CategoryState {\n  categories: CategoryItem[];\n  error: string;\n  loading: boolean;\n  editing: boolean;\n  editingId: string;\n}\n\nexport interface SettingsState {\n  isOpen: boolean;\n  previewMarkdown: boolean;\n  loading: boolean;\n  darkTheme: boolean;\n  sidebarVisible: boolean;\n}\n\nexport interface SyncState {\n  syncing: boolean;\n  lastSynced: string;\n  error: string;\n  pendingSync: boolean;\n}\n\nexport interface RootState {\n  categoryState: CategoryState;\n  transactionState: TransactionState;\n  // settingsState: SettingsState;\n  // syncState: SyncState;\n}\n\n//==============================================================================\n// API\n//==============================================================================\n\nexport interface SyncPayload {\n  categories: CategoryItem[];\n  transactions: TransactionItem[];\n}\n\n//==============================================================================\n// Events\n//==============================================================================\n\nexport type ReactDragEvent = React.DragEvent<HTMLDivElement>;\n\nexport type ReactMouseEvent =\n  | MouseEvent\n  | React.MouseEvent<HTMLDivElement>\n  | React.ChangeEvent<HTMLSelectElement>;\n\nexport type ReactSubmitEvent =\n  | React.FormEvent<HTMLFormElement>\n  | React.FocusEvent<HTMLInputElement>;\n\n//==============================================================================\n// Default Types\n//==============================================================================\n\n// Taken from TypeScript private declared type within Actions\nexport type WithPayload<P, T> = T & {\n  payload: P;\n};\n","import { CategoryItem, CategoryType } from \"../types\";\n\nexport function getCategoryItemById(\n  id: string,\n  categories: CategoryItem[]\n): CategoryItem | undefined {\n  return categories.find((cate) => cate.id === id);\n}\n","export const dateFormat = \"YYYY/MM/DD\";\nexport enum COLORS {\n  INCOME = \"#00ad6a\",\n  EXPENSE = \"#ff0000\",\n}\n// export const MONTH_STRING: readonly string[] = [\"Jan\", \"Feb\", \"Mar\", \"Apr\"];\n\n// January - Jan.\t2.   February - Feb.\n// 3.   March - Mar.\t4.   April - Apr.\n// 5.   May - May\t6.   June - Jun. or June\n// 7.   July - Jul. or July\t8.   August - Aug.\n// 9.   September - Sep. or Sept.\t10.  October - Oct.\n// 11.  November - Nov.\t12.  December - Dec.\n","import React from \"react\";\nimport { Row, Col, Divider, Button, Space, Tooltip, Typography } from \"antd\";\nimport { CategoryType, TransactionItem } from \"../../types\";\nimport \"./TransactionPanel.scss\";\nimport { DeleteTwoTone, EditTwoTone } from \"@ant-design/icons\";\nimport { getCategoryItemById } from \"../../util/category\";\nimport { getCategories } from \"../../selectors\";\nimport { useSelector } from \"react-redux\";\nimport { COLORS } from \"../../constants\";\n\ninterface TransactionPanelProps {\n  heading: React.ReactNode;\n  transactions: TransactionItem[];\n  onDelete: (event: any, id: string) => void;\n  onEdit: (event: any, id: string) => void;\n  getDateView: (dateStr: string) => React.ReactNode;\n}\n\nconst TransactionPanel: React.FC<TransactionPanelProps> = (props) => {\n  const { heading, transactions, onDelete, onEdit, getDateView } = props;\n  const { categories } = useSelector(getCategories);\n\n  return (\n    <>\n      <Divider orientation=\"left\">{heading}</Divider>\n      <ul className=\"transaction-list\">\n        {transactions.map((transacs, i) => {\n          const categoryItem = getCategoryItemById(\n            transacs.category,\n            categories\n          );\n          return (\n            <Row\n              className=\"transaction-list__item\"\n              key={i}\n              gutter={[16, 8]}\n              justify=\"space-between\"\n              align=\"middle\"\n            >\n              <Col className=\"gutter-row\" span={4}>\n                <div>{getDateView(transacs.date)}</div>\n              </Col>\n\n              <Col className=\"gutter-row\" span={4}>\n                <div\n                  style={{\n                    color:\n                      categoryItem?.categoryType === CategoryType.EXPENSE\n                        ? COLORS.EXPENSE\n                        : COLORS.INCOME,\n                  }}\n                >\n                  {` ${\n                    categoryItem?.categoryType === CategoryType.EXPENSE\n                      ? \"-\"\n                      : \"+\"\n                  }$${transacs.amount}`}\n                </div>\n              </Col>\n\n              <Col className=\"gutter-row\" span={8}>\n                <Row gutter={16}>\n                  <Col className=\"gutter-row\" span={24}>\n                    <span style={{ fontWeight: 500 }}>\n                      {categoryItem && categoryItem.name}\n                    </span>\n                  </Col>\n                  <Col className=\"gutter-row\" span={24}>\n                    <span style={{ color: \"gray\" }}>{transacs.memo}</span>\n                  </Col>\n                </Row>\n              </Col>\n\n              <Col className=\"gutter-row transaction-list__actions\">\n                <Space size={6}>\n                  <Tooltip placement=\"top\" title=\"Edit\">\n                    <Button\n                      color=\"green\"\n                      onClick={(event) => onEdit(event, transacs.id)}\n                      type=\"link\"\n                      icon={<EditTwoTone style={{ fontSize: 14 }} />}\n                    ></Button>\n                  </Tooltip>\n                  <Tooltip placement=\"top\" title=\"Delete\">\n                    <Button\n                      onClick={(event) => {\n                        onDelete(event, transacs.id);\n                      }}\n                      type=\"link\"\n                      icon={<DeleteTwoTone style={{ fontSize: 14 }} />}\n                    />\n                  </Tooltip>\n                </Space>\n              </Col>\n            </Row>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default TransactionPanel;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  Form,\n  Input,\n  Radio,\n  Select,\n  DatePicker,\n  Modal,\n  InputNumber,\n} from \"antd\";\nimport {\n  setEditing,\n  setEditingId,\n  addTransaction,\n  updateTransaction,\n} from \"../slices/transaction\";\nimport { getCategories, getTransactions } from \"../selectors\";\nimport moment from \"moment\";\nimport { CategoryItem, CategoryType, TransactionItem } from \"../types\";\nimport { dateFormat } from \"../constants\";\nimport { v4 } from \"uuid\";\nconst { Option } = Select;\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst TransactionEditModal: React.FC = () => {\n  const { editingId, editing, transactions } = useSelector(getTransactions);\n  const { categories } = useSelector(getCategories);\n  const [form] = Form.useForm();\n\n  const getCategoryTypeById = (id: string, categories: CategoryItem[]) => {\n    if (!id) {\n      return CategoryType.EXPENSE;\n    }\n    return categories.find((cate) => cate.id === id) || CategoryType.EXPENSE;\n  };\n\n  const editingTransactionItem: TransactionItem = transactions.find(\n    (item) => item.id === editingId\n  ) || {\n    id: v4(),\n    category: \"\",\n    amount: 0,\n    date: moment(new Date()).format(dateFormat),\n    memo: \"\",\n  };\n\n  const [activeCategoryType, setActiveCategoryType] = useState(\n    getCategoryTypeById(editingId, categories)\n  );\n\n  React.useEffect(() => {\n    form.resetFields();\n  }, [activeCategoryType]);\n\n  const filteredCategories = categories.filter(\n    (cate) => cate.categoryType === activeCategoryType\n  );\n\n  const dispatch = useDispatch();\n  const addingNew = editingId === \"\";\n  const _addTransaction = (transaction: TransactionItem) =>\n    dispatch(addTransaction(transaction));\n  const _updateTransaction = (transaction: TransactionItem) =>\n    dispatch(updateTransaction(transaction));\n  const _closeModal = () => dispatch(setEditing(false));\n  const handleModalClose = () => {\n    _closeModal();\n    setEditingId(\"\");\n  };\n\n  const handleTransactionCreate = (transaction: TransactionItem) => {\n    _addTransaction(transaction);\n  };\n\n  const handleTransactionUpdate = (transaction: TransactionItem) => {\n    _updateTransaction(transaction);\n  };\n\n  const modalTitle = addingNew ? \"New Transaction\" : \"Update Transaction\";\n\n  const modalOkText = addingNew ? \"Create\" : \"Update\";\n  return (\n    <React.Fragment>\n      {editing ? (\n        <Modal\n          title={modalTitle}\n          visible={true}\n          okText={modalOkText}\n          cancelText=\"Cancel\"\n          onOk={() => {\n            form\n              .validateFields()\n              .then((values) => {\n                form.resetFields();\n                handleModalClose();\n                const {\n                  category,\n                  memo,\n                  amount,\n                  date: dateMoment,\n                } = values as TransactionItem;\n\n                const transactionToSolve = {\n                  category,\n                  id: editingId || v4(),\n                  memo,\n                  amount,\n                  date: moment(dateMoment).format(dateFormat),\n                };\n\n                if (addingNew) {\n                  handleTransactionCreate(transactionToSolve);\n                } else {\n                  handleTransactionUpdate(transactionToSolve);\n                }\n              })\n              .catch((info) => {\n                console.log(info);\n              });\n          }}\n          onCancel={() => {\n            form.resetFields();\n            handleModalClose();\n          }}\n        >\n          <Form\n            form={form}\n            initialValues={{ remember: false }}\n            preserve={false}\n            {...layout}\n          >\n            <Form.Item\n              label=\"Transaction Type\"\n              name=\"transaction-type\"\n              rules={[{ required: true }]}\n              initialValue={activeCategoryType}\n            >\n              <Radio.Group\n                buttonStyle=\"outline\"\n                onChange={(event) => {\n                  setActiveCategoryType(event.target.value);\n                }}\n              >\n                <Radio.Button value={CategoryType.EXPENSE}>\n                  EXPENSE\n                </Radio.Button>\n                <Radio.Button value={CategoryType.INCOME}>INCOME</Radio.Button>\n              </Radio.Group>\n            </Form.Item>\n\n            <Form.Item\n              label=\"Category\"\n              rules={[{ required: true }]}\n              name=\"category\"\n              initialValue={filteredCategories[0].id}\n            >\n              <Select placeholder=\"Select category\">\n                {filteredCategories.map((cate) => (\n                  <Option value={cate.id} key={cate.id}>\n                    {cate.name}\n                  </Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item\n              label=\"Amount\"\n              name=\"amount\"\n              rules={[{ required: true, message: \"Please input your amount!\" }]}\n              initialValue={editingTransactionItem.amount}\n            >\n              <InputNumber\n                style={{ minWidth: 200 }}\n                formatter={(value: any) =>\n                  `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                }\n                parser={(value: any) => value.replace(/\\$\\s?|(,*)/g, \"\")}\n              />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Date\"\n              name=\"date\"\n              initialValue={moment(editingTransactionItem.date, dateFormat)}\n              rules={[{ required: true }]}\n            >\n              <DatePicker />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Memo\"\n              name=\"memo\"\n              rules={[{ message: \"Please input your username!\" }]}\n              initialValue={editingTransactionItem.memo}\n            >\n              <Input />\n            </Form.Item>\n          </Form>\n        </Modal>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nexport default TransactionEditModal;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTransactions } from \"../selectors\";\nimport {\n  addTransaction,\n  loadTransactions,\n  setEditing,\n  setEditingId,\n  deleteTransaction,\n} from \"../slices/transaction\";\nimport { TransactionItem } from \"../types\";\nimport { groupTransactionByDate } from \"../util/transaction\";\nimport {\n  PlusOutlined,\n  StarFilled,\n  ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\nimport TransactionPanel from \"../components/TransactionsCollection/TransactionPanel\";\nimport TransactionEditModal from \"./TransactionEditModal\";\nimport { Button, Space, message, Modal, Pagination, Divider } from \"antd\";\nimport { dateFormat } from \"../constants\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst { confirm } = Modal;\n\nconst TransactionsCollection: React.FC = () => {\n  const { transactions, editing, editingId } = useSelector(getTransactions);\n\n  const orderedTransactions = transactions.slice();\n\n  orderedTransactions.sort((t1, t2) =>\n    moment(t1.date).isSameOrAfter(moment(t2.date), \"D\") ? -1 : 1\n  );\n\n  const dispatch = useDispatch();\n  const _loadTransactions = () => dispatch(loadTransactions());\n  const _setEditing = (editing: boolean) => dispatch(setEditing(editing));\n  const _setEditingId = (id: string) => dispatch(setEditingId(id));\n  const _deleteTransaction = (id: string) => dispatch(deleteTransaction(id));\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(8);\n\n  const success = () => {\n    message.success(\"Successful deleted\");\n  };\n\n  React.useEffect(() => {\n    _loadTransactions();\n  }, []);\n\n  const handleEdit = (event: any, id: string) => {\n    _setEditingId(id);\n    _setEditing(true);\n  };\n\n  const handleDelete = (event: any, id: string) => {\n    _deleteTransaction(id);\n    _setEditingId(\"\");\n    _setEditing(false);\n    success();\n  };\n\n  const chunkedOrderedTransactions = _.chunk(orderedTransactions, pageSize);\n  const {\n    todayTransactions,\n    yesterdayTransactions,\n    monthsTransaction,\n  } = groupTransactionByDate(\n    chunkedOrderedTransactions[currentPage - 1],\n    moment(new Date()).format(dateFormat)\n  );\n\n  const groupTransactionByMonth = (transactions: TransactionItem[]) => {\n    const map = new Map();\n    const getKey = (dateString: string) => {\n      return dateString.split(\"-\").slice(0, 2).join(\"-\");\n    };\n    transactions.forEach((transaction) => {\n      const { date: dateString } = transaction;\n      const k = getKey(dateString);\n      if (map.has(k)) {\n        map.get(k).push(transaction);\n      } else {\n        map.set(k, [transaction]);\n      }\n    });\n    return map;\n  };\n  function showCategoryDeleteConfirm(event: any, id: string) {\n    confirm({\n      title: \"Are you sure delete this task?\",\n      icon: <ExclamationCircleOutlined />,\n      content: \"Some descriptions\",\n      okText: \"Yes\",\n      okType: \"danger\",\n      cancelText: \"No\",\n      onOk() {\n        handleDelete(event, id);\n      },\n      onCancel() {\n        console.log(\"Cancel\");\n      },\n    });\n  }\n  const transactionsByMonth = groupTransactionByMonth(monthsTransaction);\n  return (\n    <div>\n      <header></header>\n      <div>\n        <Button\n          icon={<PlusOutlined />}\n          onClick={(e) => {\n            _setEditing(true);\n            _setEditingId(\"\");\n          }}\n          type=\"primary\"\n        >\n          New Transaction\n        </Button>\n      </div>\n      {/* today */}\n      {todayTransactions.length > 0 && (\n        <TransactionPanel\n          onDelete={showCategoryDeleteConfirm}\n          onEdit={handleEdit}\n          heading={\n            <Space size={8}>\n              <span>Today</span>\n              <span>\n                <StarFilled style={{ fontSize: 20, color: \"#FFD700\" }} />\n              </span>\n            </Space>\n          }\n          transactions={todayTransactions}\n          getDateView={(dateStr) => \"today\"}\n        />\n      )}\n      {/* yesterday */}\n      {yesterdayTransactions.length > 0 && (\n        <TransactionPanel\n          onDelete={showCategoryDeleteConfirm}\n          onEdit={handleEdit}\n          heading=\"Yesterday\"\n          transactions={yesterdayTransactions}\n          getDateView={(dateStr) => \"yesterday\"}\n        />\n      )}\n      {/* previous months */}\n      {monthsTransaction.length > 0 &&\n        [...transactionsByMonth.keys()].map((key, index) => {\n          return (\n            <TransactionPanel\n              key={index}\n              onDelete={showCategoryDeleteConfirm}\n              onEdit={handleEdit}\n              heading={moment(key).format(\"YYYY MMMM\")}\n              transactions={transactionsByMonth.get(key)}\n              getDateView={(dateStr) => moment(dateStr).format(\"MMM DD\")}\n            />\n          );\n        })}\n      <TransactionEditModal />\n      <Divider></Divider>\n\n      <footer>\n        <Pagination\n          current={currentPage}\n          defaultCurrent={1}\n          onChange={(page, pageSize) => {\n            setCurrentPage(page);\n            setPageSize(pageSize || 8);\n          }}\n          total={orderedTransactions.length}\n          defaultPageSize={pageSize}\n        />\n      </footer>\n    </div>\n  );\n};\n\nexport default TransactionsCollection;\n","import { TransactionItem } from \"../types\";\nexport function groupTransactionByDate(\n  transactions: TransactionItem[],\n  start: string\n): {\n  todayTransactions: TransactionItem[];\n  yesterdayTransactions: TransactionItem[];\n  monthsTransaction: TransactionItem[];\n} {\n  if (!transactions || transactions.length === 0) {\n    return {\n      todayTransactions: [],\n      yesterdayTransactions: [],\n      monthsTransaction: [],\n    };\n  }\n  const today: TransactionItem[] = [];\n  const yesterday: TransactionItem[] = [];\n  const months: TransactionItem[] = [];\n  const startDate = new Date(start);\n  const startYesterday = new Date(start);\n  startYesterday.setDate(startDate.getDate() - 1);\n\n  const startYear = startDate.getFullYear();\n  const startMonth = startDate.getMonth();\n  const startDay = startDate.getDate();\n\n  transactions.forEach((transaction) => {\n    const { date: created } = transaction;\n    const createdDate = new Date(created);\n\n    const createdYear = createdDate.getFullYear();\n    const createdMonth = createdDate.getMonth();\n    const createdDay = createdDate.getDate();\n\n    if (\n      createdYear === startYear &&\n      startMonth === createdMonth &&\n      startDay === createdDay\n    ) {\n      today.push(transaction);\n    } else if (\n      createdYear === startYear &&\n      startMonth === createdMonth &&\n      startYesterday.getDate() === createdDay\n    ) {\n      yesterday.push(transaction);\n    } else if (\n      createdYear < startYear ||\n      (createdYear === startYear && createdMonth <= startMonth)\n    ) {\n      months.push(transaction);\n    }\n  });\n\n  return {\n    todayTransactions: today,\n    yesterdayTransactions: yesterday,\n    monthsTransaction: months,\n  };\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { CategoryState, CategoryItem } from \"../types\";\n\nexport const initialState: CategoryState = {\n  categories: [],\n  loading: true,\n  editing: false,\n  editingId: \"\",\n  error: \"category error\",\n};\n\nconst categorySlice = createSlice({\n  name: \"category\",\n  initialState,\n  reducers: {\n    addCategory: (state, { payload }: PayloadAction<CategoryItem>) => {\n      state.categories.push(payload);\n    },\n    loadCategories: (state) => {\n      state.loading = true;\n    },\n    loadCategoriesError: (state, { payload }: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = payload;\n    },\n    loadCategoriesSuccess: (\n      state,\n      { payload }: PayloadAction<CategoryItem[]>\n    ) => {\n      state.categories = payload;\n      state.loading = false;\n    },\n    setEditing: (state, { payload }: PayloadAction<boolean>) => {\n      state.editing = payload;\n    },\n    setEditingId: (state, { payload }: PayloadAction<string>) => {\n      state.editingId = payload;\n    },\n    updateCategory: (state, { payload }: PayloadAction<CategoryItem>) => {\n      state.categories = state.categories.map((category) =>\n        category.id === payload.id ? { ...category, ...payload } : category\n      );\n    },\n    deleteCategory: (state, { payload }: PayloadAction<string>) => {\n      state.categories = state.categories.filter(\n        (category) => category.id !== payload\n      );\n    },\n  },\n});\n\nexport const {\n  addCategory,\n  loadCategories,\n  loadCategoriesError,\n  loadCategoriesSuccess,\n  setEditing,\n  setEditingId,\n  updateCategory,\n  deleteCategory,\n} = categorySlice.actions;\n\nexport default categorySlice.reducer;\n","import { Color } from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface ColorTagProps {\n  color: string;\n  size?: number;\n}\nconst ColorTag: React.FC<ColorTagProps> = (props) => {\n  const { color, size = \"100%\" } = props;\n  return (\n    <div\n      style={{\n        backgroundColor: color,\n        width: 10,\n\t\t\t\theight: 20,\n\t\t\t\tdisplay: \"inline-block\",\n\t\t\t\tmarginRight:10\n      }}\n    ></div>\n  );\n};\nexport default ColorTag;\n","import React from \"react\";\nimport { CategoryItem } from \"../../../types\";\nimport { Row, Col, Button, Divider, Space } from \"antd\";\nimport { DeleteTwoTone, EditTwoTone } from \"@ant-design/icons\";\nimport ColorTag from \"../../ColorTag\";\ninterface EditableCategoryItemProps {\n  categoryItem: CategoryItem;\n  active?: boolean;\n  onEdit: (event: any, id: string) => void;\n  onDelete: (event: any, id: string) => void;\n  [key: string]: any;\n}\nconst EditableCategoryItem: React.FC<EditableCategoryItemProps> = (props) => {\n  const {\n    categoryItem: categoryItemData,\n    active = false,\n    onEdit,\n    onDelete,\n    ...others\n  } = props;\n\n  return (\n    <>\n      <li {...others}>\n        <Row justify=\"space-between\" gutter={16} align=\"middle\">\n          <Col span={2}>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <ColorTag color={categoryItemData.color} />\n            </div>\n          </Col>\n          <Col span={18}>{categoryItemData.name}</Col>\n          <Col>\n            <Space size={6}>\n              <div className=\"category-list__actions\">\n                <Button\n                  type=\"link\"\n                  onClick={(event) => onEdit(event, categoryItemData.id)}\n                  icon={<EditTwoTone style={{ fontSize: 14 }} />}\n                ></Button>\n                <Button\n                  type=\"link\"\n                  onClick={(event) => onDelete(event, categoryItemData.id)}\n                  icon={<DeleteTwoTone style={{ fontSize: 14 }} />}\n                ></Button>\n              </div>\n            </Space>\n          </Col>\n        </Row>\n      </li>\n    </>\n  );\n};\n\nexport default EditableCategoryItem;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 } from \"uuid\";\nimport {\n  Form,\n  Input,\n  Radio,\n  Select,\n  DatePicker,\n  Modal,\n  InputNumber,\n} from \"antd\";\nimport {\n  setEditing,\n  setEditingId,\n  addCategory,\n  updateCategory,\n} from \"../slices/category\";\nimport { getCategories } from \"../selectors\";\nimport { CategoryType, CategoryItem } from \"../types\";\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst CategoryEditModal: React.FC = () => {\n  const { editing, editingId, categories } = useSelector(getCategories);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n\n  const addingNew = editingId === \"\";\n  const editingCategoryItem: CategoryItem = categories.find(\n    (item) => item.id === editingId\n  ) || {\n    id: v4(),\n    color: \"#ffffff\",\n    name: \"\",\n    categoryType: CategoryType.EXPENSE,\n  };\n  const _setEditing = (editing: boolean) => dispatch(setEditing(editing));\n  const _setEditingId = (id: string) => dispatch(setEditingId(id));\n  const _addCategory = (category: CategoryItem) =>\n    dispatch(addCategory(category));\n  const _updateCategory = (category: CategoryItem) =>\n    dispatch(updateCategory(category));\n\n  const handleModalOnCancel = () => {\n    _setEditing(false);\n    _setEditingId(\"\");\n  };\n\n  const handleCategoryCreate = (category: CategoryItem) => {\n    _addCategory(category);\n  };\n\n  const handleCategoryUpdate = (category: CategoryItem) => {\n    _updateCategory(category);\n  };\n\n  const modalTitle = addingNew ? \"New Category\" : \"Update Category\";\n  const modalOkText = addingNew ? \"Create\" : \"Update\";\n\n  return (\n    <React.Fragment>\n      {editing ? (\n        <Modal\n          title={modalTitle}\n          visible={true}\n          okText={modalOkText}\n          cancelText=\"Cancel\"\n          onOk={() => {\n            form\n              .validateFields()\n              .then((values) => {\n                form.resetFields();\n                handleModalOnCancel();\n                if (addingNew) {\n                  const newCategoryItem: CategoryItem = {\n                    id: v4(),\n                    ...values,\n                  } as CategoryItem;\n                  handleCategoryCreate(newCategoryItem);\n                } else {\n                  const updatedCategoryItem: CategoryItem = {\n                    id: editingId,\n                    ...values,\n                  } as CategoryItem;\n                  handleCategoryUpdate(updatedCategoryItem);\n                }\n              })\n              .catch((info) => {\n                console.log(info);\n              });\n          }}\n          onCancel={() => {\n            form.resetFields();\n            handleModalOnCancel();\n          }}\n        >\n          <Form\n            form={form}\n            initialValues={{ remember: true }}\n            preserve={false}\n            {...layout}\n          >\n            <Form.Item\n              label=\"Category Type\"\n              name=\"categoryType\"\n              rules={[{ required: true }]}\n              initialValue={editingCategoryItem.categoryType}\n            >\n              <Radio.Group buttonStyle=\"outline\">\n                <Radio.Button value={CategoryType.EXPENSE}>\n                  EXPENSE\n                </Radio.Button>\n                <Radio.Button value={CategoryType.INCOME}>INCOME</Radio.Button>\n              </Radio.Group>\n            </Form.Item>\n\n            <Form.Item\n              label=\"Name\"\n              name=\"name\"\n              initialValue={editingCategoryItem.name}\n              rules={[{ required: true }]}\n            >\n              <Input placeholder=\"New Category...\" />\n            </Form.Item>\n\n            <Form.Item\n              label=\"Color Tag\"\n              name=\"color\"\n              initialValue={editingCategoryItem.color}\n              rules={[{ required: true }]}\n            >\n              <input type=\"color\" />\n            </Form.Item>\n          </Form>\n        </Modal>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nexport default CategoryEditModal;\n","import React, { useState } from \"react\";\nimport { Button, Modal, message, Divider } from \"antd\";\nimport { CategoryType } from \"../types\";\nimport { PlusOutlined, ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCategories } from \"../selectors\";\nimport { CategoryItem } from \"../types\";\nimport \"./CategoryManager.scss\";\nimport {\n  addCategory,\n  loadCategories,\n  setEditing,\n  deleteCategory,\n} from \"../slices/category\";\nimport EditableCategoryItem from \"../components/ManagerView/CategoryManager/EditableCategoryItem\";\nimport CategoryEditModal from \"./CategoryEditModal\";\nimport { setEditingId } from \"../slices/category\";\nimport { rejects } from \"assert\";\nconst { confirm } = Modal;\n\nconst CategoryManager = () => {\n  const [modal, contextHolder] = Modal.useModal();\n\n  const { categories, editing, editingId } = useSelector(getCategories);\n\n  const dispatch = useDispatch();\n  const _loadCategories = () => dispatch(loadCategories());\n  const _setEditing = (editing: boolean) => dispatch(setEditing(editing));\n  const _setEditingId = (id: string) => dispatch(setEditingId(id));\n  const _deleteCategory = (id: string) => dispatch(deleteCategory(id));\n  const _addCategory = (categoryItem: CategoryItem) =>\n    dispatch(addCategory(categoryItem));\n\n  React.useEffect(() => {\n    _loadCategories();\n    return () => {};\n  }, []);\n\n  const handleCategoryOnSave = (event: any, id: string) => {\n    _setEditing(true);\n    _setEditingId(id);\n  };\n  const handleCategoryDelete = (event: any, id: string) => {\n    _setEditing(false);\n    _setEditingId(\"\");\n    _deleteCategory(id);\n    success();\n  };\n\n  const handleOnClick = (event: any) => {\n    _setEditing(true);\n    _setEditingId(\"\");\n  };\n\n  const success = () => {\n    message.success(\"Successful deleted\");\n  };\n\n  function showCategoryDeleteConfirm(event: any, id: string) {\n    confirm({\n      title: \"Are you sure delete this task?\",\n      icon: <ExclamationCircleOutlined />,\n      content: \"Some descriptions\",\n      okText: \"Yes\",\n      okType: \"danger\",\n      cancelText: \"No\",\n      onOk() {\n        handleCategoryDelete(event, id);\n      },\n      onCancel() {\n        console.log(\"Cancel\");\n      },\n    });\n  }\n  return (\n    <div>\n      <Divider></Divider>\n      <ul className=\"category-list\" style={{ listStyle: \"none\" }}>\n        {categories.map((cate) => (\n          <EditableCategoryItem\n            key={cate.id}\n            categoryItem={cate}\n            onEdit={(event, id) => {\n              handleCategoryOnSave(event, id);\n            }}\n            onDelete={(event, id) => {\n              showCategoryDeleteConfirm(event, id);\n            }}\n            className=\"category-list__item\"\n          />\n        ))}\n      </ul>\n      <div>\n        <Button type=\"default\" icon={<PlusOutlined />} onClick={handleOnClick}>\n          New Category\n        </Button>\n      </div>\n      {editing ? <CategoryEditModal /> : null}\n      <Divider></Divider>\n    </div>\n  );\n};\n\nexport default CategoryManager;\n","import React from \"react\";\nimport CategoryManager from \"./CategoryManager\";\n\nconst ManageView = () => {\n  return (\n    <>\n      <CategoryManager />\n    </>\n  );\n};\nexport default ManageView;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { getTransactions } from \"../../selectors\";\nimport { useSelector } from \"react-redux\";\nimport { CategoryItem, TransactionItem } from \"../../types\";\nimport { Space, Select, DatePicker, Spin } from \"antd\";\nimport { Pie } from \"react-chartjs-2\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\ninterface ExpensePanelProps {\n  categories: CategoryItem[];\n}\n\nconst ExpensePanel: React.FC<ExpensePanelProps> = (props) => {\n  const { categories } = props;\n  const { transactions } = useSelector(getTransactions);\n  const [paused, setPaused] = useState(false);\n  const puasedTimer = useRef<number>();\n\n  const [selectedCate, setSelectedCate] = useState(\"all\");\n  const [start, setStart] = useState(moment(new Date()).format(\"YYYY-MM\"));\n  const [end, setEnd] = useState(\n    moment(new Date()).add(1, \"M\").format(\"YYYY-MM\")\n  );\n\n  const rangeStartRef = useRef<string>(start);\n  const rangeEndRef = useRef<string>(end);\n\n  const setPausedWithDelay = (paused: boolean) => {\n    clearTimeout(puasedTimer.current);\n    puasedTimer.current = window.setTimeout(() => {\n      setPaused(paused);\n    }, 1500);\n  };\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(puasedTimer.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    setStart(rangeStartRef.current);\n    setEnd(rangeEndRef.current);\n    return () => {};\n  }, [paused]);\n\n  const filteredTransactions = transactions.filter((transaction) => {\n    let arr: string[] = [];\n    if (selectedCate === \"all\") {\n      arr = categories.map((cate) => cate.id);\n    } else {\n      arr = [selectedCate];\n    }\n    if (arr.indexOf(transaction.category) !== -1) {\n      const { date: created } = transaction;\n      const inRange =\n        moment(created).isSameOrAfter(start, \"M\") &&\n        moment(created).isSameOrBefore(end, \"M\");\n      if (inRange) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  });\n  const pieDataMap = new Map();\n\n  filteredTransactions.forEach((transaction) => {\n    const { category: cateId, amount } = transaction;\n    pieDataMap.set(cateId, (pieDataMap.get(cateId) || 0) + amount);\n  });\n\n  const categoriesMap = new Map<string, CategoryItem>();\n\n  categories.forEach((cate) => {\n    categoriesMap.set(cate.id, cate);\n  });\n  const groupedData = _.groupBy(\n    filteredTransactions,\n    \"category\"\n  );\n  let _data:number[] = [];\n  \n  Object.values(groupedData).forEach(arr => {\n    let count = 0;\n    arr.forEach((element: any) => {\n      count += element.amount;\n    });\n    _data.push(count as number);\n  });\n\n\tconst data = {\n    labels: Object.keys(groupedData).map((id) => categoriesMap.get(id)?.name),\n    datasets: [\n      {\n        label: \"\",\n        data: _data.map((n) => n.toFixed(2)),\n        backgroundColor: Object.keys(groupedData).map((id) => categoriesMap.get(id)?.color),\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <>\n      <div className=\"expense-panel\">\n        <div className=\"expense-panel__filter\">\n          <Space direction=\"horizontal\" size={24}>\n            <Select\n              defaultValue={selectedCate}\n              onChange={(value) => {\n                setSelectedCate(value);\n              }}\n              style={{ width: 150 }}\n            >\n              {[\n                <Option key={\"all\"} value={\"all\"}>\n                  All\n                </Option>,\n                ...categories.map((cate) => (\n                  <Option key={cate.id} value={cate.id}>\n                    {cate.name}\n                  </Option>\n                )),\n              ]}\n            </Select>\n            <RangePicker\n              onCalendarChange={(dates, dateStrings) => {\n                const [s, e] = dateStrings;\n                rangeStartRef.current = s;\n                rangeEndRef.current = e;\n              }}\n              onOpenChange={(open) => {\n                setPausedWithDelay(open);\n              }}\n              picker=\"month\"\n              defaultValue={[moment(start), moment(end)]}\n            />\n          </Space>\n        </div>\n\n        <div style={{marginTop:40}}>\n          <Pie data={data} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ExpensePanel;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { getTransactions } from \"../../selectors\";\nimport { useSelector } from \"react-redux\";\nimport { CategoryItem } from \"../../types\";\nimport { Space, Select, DatePicker } from \"antd\";\nimport { Pie } from \"react-chartjs-2\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nconst { RangePicker } = DatePicker;\nconst { Option } = Select;\ninterface IncomePanelProps {\n  categories: CategoryItem[];\n}\n\nconst IncomePanel: React.FC<IncomePanelProps> = (props) => {\n  const { categories } = props;\n  const { transactions } = useSelector(getTransactions);\n  const [paused, setPaused] = useState(false);\n  const puasedTimer = useRef<number>();\n\n  const [selectedCate, setSelectedCate] = useState(\"all\");\n  const [start, setStart] = useState(moment(new Date()).format(\"YYYY-MM\"));\n  const [end, setEnd] = useState(\n    moment(new Date()).add(1, \"M\").format(\"YYYY-MM\")\n  );\n\n  const rangeStartRef = useRef<string>(start);\n  const rangeEndRef = useRef<string>(end);\n\n  const setPausedWithDelay = (paused: boolean) => {\n    clearTimeout(puasedTimer.current);\n    puasedTimer.current = window.setTimeout(() => {\n      setPaused(paused);\n    }, 1500);\n  };\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(puasedTimer.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    setStart(rangeStartRef.current);\n    setEnd(rangeEndRef.current);\n    return () => {};\n  }, [paused]);\n\n  const filteredTransactions = transactions.filter((transaction) => {\n    let arr: string[] = [];\n    if (selectedCate === \"all\") {\n      arr = categories.map((cate) => cate.id);\n    } else {\n      arr = [selectedCate];\n    }\n    if (arr.indexOf(transaction.category) !== -1) {\n      const { date: created } = transaction;\n      const inRange =\n        moment(created).isSameOrAfter(start, \"M\") &&\n        moment(created).isSameOrBefore(end, \"M\");\n      if (inRange) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  });\n  const pieDataMap = new Map();\n  filteredTransactions.forEach((transaction) => {\n    const { category: cateId, amount } = transaction;\n    pieDataMap.set(cateId, (pieDataMap.get(cateId) || 0) + amount);\n  });\n\n  const categoriesMap = new Map<string, CategoryItem>();\n\n  categories.forEach((cate) => {\n    categoriesMap.set(cate.id, cate);\n  });\n  const groupedData = _.groupBy(filteredTransactions, \"category\");\n  let _data: number[] = [];\n\n  Object.values(groupedData).forEach((arr) => {\n    let count = 0;\n    arr.forEach((element: any) => {\n      count += element.amount;\n    });\n    _data.push(count as number);\n  });\n\n  const data = {\n    labels: Object.keys(groupedData).map((id) => categoriesMap.get(id)?.name),\n    datasets: [\n      {\n        label: \"\",\n        data: _data.map((n) => n.toFixed(2)),\n        backgroundColor: Object.keys(groupedData).map(\n          (id) => categoriesMap.get(id)?.color\n        ),\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return (\n    <>\n      <div className=\"income-panel\">\n        <div className=\"income-panel__filter\">\n          <Space direction=\"horizontal\" size={24}>\n            <Select\n              defaultValue={selectedCate}\n              onChange={(value) => {\n                setSelectedCate(value);\n              }}\n              style={{ width: 150 }}\n            >\n              {[\n                <Option key={\"all\"} value={\"all\"}>\n                  All\n                </Option>,\n                ...categories.map((cate) => (\n                  <Option key={cate.id} value={cate.id}>\n                    {cate.name}\n                  </Option>\n                )),\n              ]}\n            </Select>\n            <RangePicker\n              onCalendarChange={(dates, dateStrings) => {\n                const [s, e] = dateStrings;\n                rangeStartRef.current = s;\n                rangeEndRef.current = e;\n              }}\n              onOpenChange={(open) => {\n                setPausedWithDelay(open);\n              }}\n              picker=\"month\"\n              defaultValue={[moment(start), moment(end)]}\n            />\n          </Space>\n        </div>\n\n        <div style={{ marginTop: 40 }}>\n          <Pie data={data} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default IncomePanel;\n","import React, { useState } from \"react\";\n\nimport { Tabs, Select, DatePicker, Space } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCategories } from \"../selectors\";\nimport { CategoryItem, CategoryType } from \"../types\";\nimport ExpensePanel from \"../components/Dashboard/ExpensePanel\";\nimport IncomePanel from \"../components/Dashboard/IncomePanel\";\nimport { addCategory, loadCategories } from \"../slices/category\";\nimport moment from \"moment\";\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nconst { RangePicker } = DatePicker;\n\nconst Dashboard = () => {\n  const { categories } = useSelector(getCategories);\n  const [activeCategoryType, setActiveCategoryType] = useState<CategoryType>(\n    CategoryType.EXPENSE\n  );\n\n  const dispatch = useDispatch();\n  const handleActiveTabChange = (activeKey: string) => {\n    setActiveCategoryType(activeKey as CategoryType);\n  };\n\n  const categories1: CategoryItem[] = [];\n  const categories2: CategoryItem[] = [];\n  categories.forEach((cate) => {\n    if (cate.categoryType === CategoryType.EXPENSE) {\n      categories1.push(cate);\n    } else {\n      categories2.push(cate);\n    }\n  });\n  \n  return (\n    <Tabs\n      defaultActiveKey={activeCategoryType}\n      onChange={handleActiveTabChange}\n    >\n      <TabPane tab={CategoryType.EXPENSE} key={CategoryType.EXPENSE}>\n        <ExpensePanel categories={categories1} />\n      </TabPane>\n      <TabPane tab={CategoryType.INCOME} key={CategoryType.INCOME}>\n        <IncomePanel categories={categories2} />\n      </TabPane>\n    </Tabs>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport { Typography, Row, Col } from \"antd\";\n\nconst { Text } = Typography;\n\ninterface SummaryBoardProps {\n  thisMonthExpense?: number;\n  thisMonthIncome?: number;\n}\nconst SummaryBoard: React.FC<SummaryBoardProps> = (props) => {\n\tconst { thisMonthExpense = 0, thisMonthIncome = 0 } = props;\n\t\n\n  const netRevenue = parseFloat(\n    (thisMonthIncome - thisMonthExpense).toFixed(2)\n\t);\n\t\n\n  return (\n    <div>\n      <Text style={{ fontWeight: 400 }}>Month Spend</Text>\n      <div>\n        <Typography.Title level={2}>\n          ${thisMonthExpense.toString()}\n        </Typography.Title>\n      </div>\n\n      <Row gutter={[12, 24]}>\n        <Col span={6}>\n          <Text style={{ fontWeight: 400 }}>Month Income</Text>\n          <div>\n            <Typography.Title level={4}>${thisMonthIncome}</Typography.Title>\n          </div>\n        </Col>\n        <Col span={6}>\n          <Text style={{ fontWeight: 400 }}>Month Revenue</Text>\n          <div>\n            <Typography.Title level={4}>\n              {netRevenue < 0 ? `-$${-netRevenue}` : `+$${netRevenue}`}\n            </Typography.Title>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default SummaryBoard;\n","import React from \"react\";\nimport SummaryBoard from \"../components/Summary/SummaryBoard\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getTransactions, getCategories } from \"../selectors\";\nimport {\n  addTransaction,\n  loadTransactions,\n  setEditing,\n  setEditingId,\n} from \"../slices/transaction\";\nimport { CategoryType, TransactionItem } from \"../types\";\nimport { groupTransactionByDate } from \"../util/transaction\";\nimport { PlusOutlined, StarFilled } from \"@ant-design/icons\";\nimport TransactionPanel from \"../components/TransactionsCollection/TransactionPanel\";\nimport TransactionEditModal from \"./TransactionEditModal\";\nimport { Button, Space } from \"antd\";\nimport { dateFormat } from \"../constants\";\nimport { getCategoryItemById } from \"../util/category\";\nimport moment from \"moment\";\nimport \"./SummaryBanner.scss\";\n\nconst SummaryBanner = () => {\n  const { transactions } = useSelector(getTransactions);\n  const { categories } = useSelector(getCategories);\n\n  const thisMonthTransactions = transactions.filter((transaction) =>\n    moment(transaction.date).isSame(moment(new Date(), \"YYYY-MM\"), \"M\")\n  );\n\n  let thisMonthExpense = 0;\n  let thisMonthIncome = 0;\n  thisMonthTransactions.forEach((transaction) => {\n    const cateItem = getCategoryItemById(transaction.category, categories);\n    if (cateItem && cateItem.categoryType === CategoryType.EXPENSE) {\n      thisMonthExpense += transaction.amount;\n    } else if (cateItem && cateItem.categoryType === CategoryType.INCOME) {\n      thisMonthIncome += transaction.amount;\n    }\n  });\n\n  return (\n    <div className=\"summary-banner\">\n      <div className=\"summary-banner__inner\">\n        <SummaryBoard\n          thisMonthExpense={thisMonthExpense}\n          thisMonthIncome={thisMonthIncome}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SummaryBanner;\n","import React from \"react\";\nimport { Button, Tooltip, Space,Row, Col } from \"antd\";\nimport { CloudDownloadOutlined } from \"@ant-design/icons\";\nconst Toolbar = () => {\n  return (\n    <Row justify=\"end\" align=\"middle\">\n      <Col>\n{/*        \n          <Button\n            icon={<CloudDownloadOutlined style={{ fontSize: 20 }} />}\n\t\t\t\t\ttype=\"link\"\n\t\t\t\t\ttitle=\"Export Data\"\n          ></Button> */}\n      </Col>\n    </Row>\n  );\n};\n\nexport default Toolbar;\n","export default __webpack_public_path__ + \"static/media/logo.648d16ba.png\";","import React from \"react\";\nimport Toolbar from \"./Toolbar\";\nimport { Row, Col, Typography } from \"antd\";\nimport \"./Header.scss\";\nimport logo from \"../images/logo.png\";\nconst Header = () => {\n  return (\n    <header className=\"global-header\">\n      <div className=\"global-header__inner\">\n        <Row gutter={20} justify=\"space-between\" align=\"middle\">\n          <Col span=\"18\">\n            <div className=\"logo\">\n\t\t\t\t\t\t\t<img src={logo} width={200} alt=\"logo\" />\n            </div>\n          </Col>\n          <Col span=\"6\">\n            <Toolbar />\n          </Col>\n        </Row>\n      </div>\n    </header>\n  );\n};\nexport default Header;\n","import React from \"react\";\nimport TransactionsCollection from \"./TransactionsCollection\";\nimport CategorySummary from \"./CategorySummary\";\nimport ManageView from \"./ManageView\";\nimport Dashboard from \"./Dashboard\";\nimport SummaryBanner from \"./SummaryBanner\";\nimport { Row, Col } from \"antd\";\nimport Header from \"./Header\";\nimport \"./App.css\";\nimport \"./TransactionsCollection.scss\";\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <SummaryBanner />\n      <main>\n        <section className=\"section\">\n          <Row gutter={[48, 48]}>\n            <Col className=\"gutter-row\" span={24}>\n              <TransactionsCollection />\n            </Col>\n          </Row>\n        </section>\n\n        <Row gutter={[48, 48]}>\n          <Col className=\"gutter-row\" span={24}>\n            <ManageView />\n          </Col>\n        </Row>\n        <Row gutter={[48, 48]}>\n          <Col className=\"gutter-row\" span={24}>\n            <Dashboard />\n          </Col>\n        </Row>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","type PromiseCallback = (v?: any) => void;\n\ntype GetLocalStorage = (\n  key: string,\n  errorMessage?: string\n) => (resolve: PromiseCallback, reject: PromiseCallback) => void;\n\nconst getLocalStorage: GetLocalStorage = (\n  key,\n  errorMessage = \"Error message\"\n) => (resolve, reject) => {\n  const data = localStorage.getItem(key);\n  if (data) {\n    resolve(JSON.parse(data));\n  } else {\n    reject({\n      message: errorMessage,\n    });\n  }\n};\n\nexport const requestTransactions = () =>\n  new Promise(getLocalStorage(\"transactions\"));\nexport const requestCategoies = () =>\n  new Promise(getLocalStorage(\"categories\"));\n","import { all, put, takeLatest } from \"redux-saga/effects\";\nimport { requestTransactions, requestCategoies } from \"../api/index\";\nimport {\n  loadTransactions,\n  loadTransactionsError,\n  loadTransactionsSuccess,\n} from \"../slices/transaction\";\n\nimport {\n  loadCategories,\n  loadCategoriesError,\n  loadCategoriesSuccess,\n} from \"../slices/category\";\nimport { CategoryItem, TransactionItem } from \"../types\";\n\nfunction* fetchTransactions() {\n  let data: TransactionItem[];\n  try {\n    data = yield requestTransactions();\n    yield put(loadTransactionsSuccess(data));\n  } catch (error) {\n    yield put(loadTransactionsError(error.message));\n  }\n}\n\nfunction* fetchCategories() {\n  let data: CategoryItem[];\n  try {\n    data = yield requestCategoies();\n    yield put(loadCategoriesSuccess(data));\n  } catch (error) {\n    yield put(loadCategoriesError(error.message));\n  }\n}\n\nfunction* rootSaga() {\n  yield all([\n    takeLatest(loadTransactions.type, fetchTransactions),\n    takeLatest(loadCategories.type, fetchCategories),\n  ]);\n}\n\nexport default rootSaga;\n","import { combineReducers, Reducer } from \"redux\";\n\nimport transactionReducer from \"./transaction\";\nimport categoryReducer from \"./category\";\nimport { RootState } from \"../types\";\n\nconst rootReducer: Reducer<RootState> = combineReducers<RootState>({\n  transactionState: transactionReducer,\n  categoryState: categoryReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { Router } from \"react-router-dom\";\nimport createSagaMiddleware from \"redux-saga\";\nimport ReactDOM from \"react-dom\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nimport App from \"./containers/App\";\nimport rootSaga from \"./sagas\";\nimport rootReducer from \"./slices\";\nimport { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [sagaMiddleware, ...getDefaultMiddleware({ thunk: false })],\n});\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}